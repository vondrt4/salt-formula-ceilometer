doc:
  name: Ceilometer
  description: The ceilometer project aims to deliver a unique point of contact for billing systems to acquire all of the measurements they need to establish customer billing, across all current OpenStack core components with work underway to support future OpenStack components.
  role:
  {%- if pillar.ceilometer.agent is defined %}
  {%- from "ceilometer/map.jinja" import agent with context %}
    agent:
      name: agent
      param:
        version:
          name: "Version"
          value: {{ agent.version }}
        packages:
          value: |
            {%- for pkg in agent.pkgs %}
            {%- set pkg_version = "dpkg -l "+pkg+" | grep "+pkg+" | awk '{print $3}'" %}
            * {{ pkg }}: {{ salt['cmd.run'](pkg_version) }}
            {%- endfor %}
  {%- endif %}
  {%- if pillar.ceilometer.server is defined %}
  {%- from "ceilometer/map.jinja" import server with context %}
    server:
      name: server
      endpoint:
        glance_api:
          name: ceilometer-api
          type: ceilometer-api
          address: http://{{ server.bind.host }}:{{ server.bind.port }}
          protocol: http
      param:
        bind:
          value: {{ server.bind.host }}:{{ server.bind.port }}
        ttl:
          name: "Time to live for ceilometer metrics"
          value: {{ server.ttl }}
        version:
          name: "Version"
          value: {{ server.version }}
        database_engine:
          name: "Database engine"
          value: "{{ server.database.get('engine', 'mongodb') }}"
        database_host:
          name: "Database"
          value: "{{ server.database.user }}@{% if server.database.host is defined %}{{ server.database.host }}{% else %}[{% for member in server.database.members %}{{ member.host }}:{{ member.get('port', '27017') }}{% if not loop.last %},{% endif %}{% endfor %}]{% endif %}:27017/{{ server.database.name }}"
        message_queue_ip:
          name: "Message queue"
          value: {{ server.message_queue.user }}@{{ server.message_queue.host }}:{{ server.message_queue.port }}{{ server.message_queue.virtual_host }}
        identity_host:
          name: "Identity service"
          value: {{ server.identity.user }}@{{ server.identity.host }}:{{ server.identity.port }}
        packages:
          value: |
            {%- for pkg in server.pkgs %}
            {%- set pkg_version = "dpkg -l "+pkg+" | grep "+pkg+" | awk '{print $3}'" %}
            * {{ pkg }}: {{ salt['cmd.run'](pkg_version) }}
            {%- endfor %}
  {%- endif %}
